import os
import glob
import random
from PIL import Image
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader, random_split
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
from torchmetrics.classification import Precision, Recall, F1Score, MulticlassROC
import torchvision.models as models
import json
import gradio as gr

# 全局超参数和路径设置
CLASSES = [
    'dangshen', 'gouqi', 'huaihua', 'jiangcan', 'niubangzi', 'tiannanxing', 'mudanpi', 'zhuling', 'gancao', 'baihe',
    'baibu', 'zhuye', 'zhuru', 'zicao', 'hongteng', 'aiye', 'jingjie', 'jinyinhua', 'huangbai', 'huangqi'
]
NUM_CLASSES = len(CLASSES)
IMAGE_SIZE = (224, 224)
DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')


# 自定义数据集类
class ChineseMedicineDataset(Dataset):
    def __init__(self, root_dir, classes, transform=None):
        self.samples = []
        self.transform = transform
        for idx, cls in enumerate(classes):
            folder = os.path.join(root_dir, cls)
            for img_path in glob.glob(os.path.join(folder, "*.jpg")):
                self.samples.append((img_path, idx))

    def __len__(self):
        return len(self.samples)

    def __getitem__(self, idx):
        img_path, label = self.samples[idx]
        image = Image.open(img_path).convert('RGB')
        if self.transform:
            image = self.transform(image)
        return image, label


def train_model(data_dir, batch_size, learning_rate, num_epochs):
    # 数据预处理和数据加载器
    transform = transforms.Compose([
        transforms.Resize(IMAGE_SIZE),
        transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])

    dataset = ChineseMedicineDataset(data_dir, CLASSES, transform)
    total = len(dataset)
    if total == 0:
        raise RuntimeError(f"未在 {data_dir} 下找到任何图像，请检查路径和文件名格式。")

    train_ratio = 0.7
    val_ratio = 0.2
    test_ratio = 0.1
    train_size = int(train_ratio * total)
    val_size = int(val_ratio * total)
    test_size = total - train_size - val_size
    train_set, val_set, test_set = random_split(
        dataset, [train_size, val_size, test_size],
        generator=torch.Generator().manual_seed(42)
    )

    train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True)
    val_loader = DataLoader(val_set, batch_size=batch_size, shuffle=False)
    test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False)

    # 定义 EfficientNet-B1 模型
    model = models.efficientnet_b1(pretrained=True)
    num_ftrs = model.classifier[1].in_features
    model.classifier[1] = nn.Linear(num_ftrs, NUM_CLASSES)
    model = model.to(DEVICE)

    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=learning_rate)
    scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=5, gamma=0.1)

    # 定义评估指标
    precision_metric = Precision(task='multiclass', num_classes=NUM_CLASSES, average='macro').to(DEVICE)
    recall_metric = Recall(task='multiclass', num_classes=NUM_CLASSES, average='macro').to(DEVICE)
    f1_metric = F1Score(task='multiclass', num_classes=NUM_CLASSES, average='macro').to(DEVICE)
    roc_metric = MulticlassROC(num_classes=NUM_CLASSES).to(DEVICE)

    # 训练和评估函数
    def train_one_epoch(loader):
        model.train()
        running_loss = 0.0
        for images, labels in loader:
            images, labels = images.to(DEVICE), labels.to(DEVICE)
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item() * images.size(0)
        return running_loss / len(loader.dataset)

    def evaluate(loader, compute_roc=False):
        model.eval()
        all_probs, all_labels = [], []
        with torch.no_grad():
            for images, labels in loader:
                images = images.to(DEVICE)
                probs = torch.softmax(model(images), dim=1)
                all_probs.append(probs)
                all_labels.append(labels)
        all_probs = torch.cat(all_probs)
        all_labels = torch.cat(all_labels).to(DEVICE)
        preds = torch.argmax(all_probs, dim=1)

        acc = (preds == all_labels).float().mean().item()
        prec = precision_metric(preds, all_labels).item()
        rec = recall_metric(preds, all_labels).item()
        f1 = f1_metric(preds, all_labels).item()
        roc_data = None
        if compute_roc:
            fpr, tpr, _ = roc_metric(all_probs, all_labels)
            roc_data = (fpr, tpr)
        return acc, prec, rec, f1, roc_data

    # 主训练循环
    train_losses, val_metrics = [], []
    for epoch in range(1, num_epochs + 1):
        t_loss = train_one_epoch(train_loader)
        v_acc, v_prec, v_rec, v_f1, _ = evaluate(val_loader)
        train_losses.append(t_loss)
        val_metrics.append((v_acc, v_prec, v_rec, v_f1))
        print(f"Epoch {epoch}/{num_epochs} "
              f"Train Loss:{t_loss:.4f} "
              f"Val Acc:{v_acc:.4f} "
              f"Val Prec:{v_prec:.4f} "
              f"Val Rec:{v_rec:.4f} "
              f"Val F1:{v_f1:.4f}")
        scheduler.step()

    # 最终测试评估
    t_acc, t_prec, t_rec, t_f1, roc_data = evaluate(test_loader, compute_roc=True)
    print(f"Test Acc:{t_acc:.4f} Prec:{t_prec:.4f} Rec:{t_rec:.4f} F1:{t_f1:.4f}")

    # 保存模型
    torch.save(model.state_dict(), 'efficientnet_b1_model.pth')

    # 保存训练指标
    metrics = {
        'train_losses': train_losses,
        'val_metrics': val_metrics,
        'test_acc': t_acc,
        'test_prec': t_prec,
        'test_rec': t_rec,
        'test_f1': t_f1
    }
    with open('training_metrics.json', 'w') as f:
        json.dump(metrics, f)

    return f"Test Acc: {t_acc:.4f}, Prec: {t_prec:.4f}, Rec: {t_rec:.4f}, F1: {t_f1:.4f}"


# Gradio UI 界面
with gr.Blocks() as demo:
    gr.Markdown("### 中药图像分类训练系统")
    with gr.Row():
        data_dir = gr.Textbox(label="数据集路径", placeholder="请输入数据集路径")
        batch_size = gr.Number(label="批次大小", value=32)
        learning_rate = gr.Number(label="学习率", value=1e-3)
        num_epochs = gr.Number(label="训练轮数", value=10)
    train_button = gr.Button("开始训练")
    output_text = gr.Textbox(label="训练结果")

    train_button.click(
        fn=train_model,
        inputs=[data_dir, batch_size, learning_rate, num_epochs],
        outputs=output_text
    )

demo.launch()
    
